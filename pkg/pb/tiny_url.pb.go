// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: tiny_url.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OriGinUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginUrl string `protobuf:"bytes,1,opt,name=origin_url,json=originUrl,proto3" json:"origin_url,omitempty"`
}

func (x *OriGinUrl) Reset() {
	*x = OriGinUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tiny_url_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OriGinUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OriGinUrl) ProtoMessage() {}

func (x *OriGinUrl) ProtoReflect() protoreflect.Message {
	mi := &file_tiny_url_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OriGinUrl.ProtoReflect.Descriptor instead.
func (*OriGinUrl) Descriptor() ([]byte, []int) {
	return file_tiny_url_proto_rawDescGZIP(), []int{0}
}

func (x *OriGinUrl) GetOriginUrl() string {
	if x != nil {
		return x.OriginUrl
	}
	return ""
}

type ShortUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TinyUrl string `protobuf:"bytes,1,opt,name=tiny_url,json=tinyUrl,proto3" json:"tiny_url,omitempty"`
}

func (x *ShortUrl) Reset() {
	*x = ShortUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tiny_url_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortUrl) ProtoMessage() {}

func (x *ShortUrl) ProtoReflect() protoreflect.Message {
	mi := &file_tiny_url_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortUrl.ProtoReflect.Descriptor instead.
func (*ShortUrl) Descriptor() ([]byte, []int) {
	return file_tiny_url_proto_rawDescGZIP(), []int{1}
}

func (x *ShortUrl) GetTinyUrl() string {
	if x != nil {
		return x.TinyUrl
	}
	return ""
}

var File_tiny_url_proto protoreflect.FileDescriptor

var file_tiny_url_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x74, 0x69, 0x6e, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x02, 0x70, 0x62, 0x22, 0x2a, 0x0a, 0x09, 0x4f, 0x72, 0x69, 0x47, 0x69, 0x6e, 0x55, 0x72,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x55, 0x72, 0x6c,
	0x22, 0x25, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x69, 0x6e, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x69, 0x6e, 0x79, 0x55, 0x72, 0x6c, 0x32, 0x61, 0x0a, 0x07, 0x54, 0x69, 0x6e, 0x79, 0x55,
	0x72, 0x6c, 0x12, 0x29, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6e, 0x79, 0x55, 0x72, 0x6c,
	0x12, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x69, 0x47, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x1a,
	0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x2b, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x1a, 0x0d, 0x2e, 0x70, 0x62,
	0x2e, 0x4f, 0x72, 0x69, 0x47, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x2e,
	0x2f, 0x70, 0x62, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tiny_url_proto_rawDescOnce sync.Once
	file_tiny_url_proto_rawDescData = file_tiny_url_proto_rawDesc
)

func file_tiny_url_proto_rawDescGZIP() []byte {
	file_tiny_url_proto_rawDescOnce.Do(func() {
		file_tiny_url_proto_rawDescData = protoimpl.X.CompressGZIP(file_tiny_url_proto_rawDescData)
	})
	return file_tiny_url_proto_rawDescData
}

var file_tiny_url_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_tiny_url_proto_goTypes = []interface{}{
	(*OriGinUrl)(nil), // 0: pb.OriGinUrl
	(*ShortUrl)(nil),  // 1: pb.ShortUrl
}
var file_tiny_url_proto_depIdxs = []int32{
	0, // 0: pb.TinyUrl.GetTinyUrl:input_type -> pb.OriGinUrl
	1, // 1: pb.TinyUrl.GetOriginUrl:input_type -> pb.ShortUrl
	1, // 2: pb.TinyUrl.GetTinyUrl:output_type -> pb.ShortUrl
	0, // 3: pb.TinyUrl.GetOriginUrl:output_type -> pb.OriGinUrl
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_tiny_url_proto_init() }
func file_tiny_url_proto_init() {
	if File_tiny_url_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tiny_url_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OriGinUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tiny_url_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tiny_url_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tiny_url_proto_goTypes,
		DependencyIndexes: file_tiny_url_proto_depIdxs,
		MessageInfos:      file_tiny_url_proto_msgTypes,
	}.Build()
	File_tiny_url_proto = out.File
	file_tiny_url_proto_rawDesc = nil
	file_tiny_url_proto_goTypes = nil
	file_tiny_url_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TinyUrlClient is the client API for TinyUrl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TinyUrlClient interface {
	GetTinyUrl(ctx context.Context, in *OriGinUrl, opts ...grpc.CallOption) (*ShortUrl, error)
	GetOriginUrl(ctx context.Context, in *ShortUrl, opts ...grpc.CallOption) (*OriGinUrl, error)
}

type tinyUrlClient struct {
	cc grpc.ClientConnInterface
}

func NewTinyUrlClient(cc grpc.ClientConnInterface) TinyUrlClient {
	return &tinyUrlClient{cc}
}

func (c *tinyUrlClient) GetTinyUrl(ctx context.Context, in *OriGinUrl, opts ...grpc.CallOption) (*ShortUrl, error) {
	out := new(ShortUrl)
	err := c.cc.Invoke(ctx, "/pb.TinyUrl/GetTinyUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinyUrlClient) GetOriginUrl(ctx context.Context, in *ShortUrl, opts ...grpc.CallOption) (*OriGinUrl, error) {
	out := new(OriGinUrl)
	err := c.cc.Invoke(ctx, "/pb.TinyUrl/GetOriginUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TinyUrlServer is the server API for TinyUrl service.
type TinyUrlServer interface {
	GetTinyUrl(context.Context, *OriGinUrl) (*ShortUrl, error)
	GetOriginUrl(context.Context, *ShortUrl) (*OriGinUrl, error)
}

// UnimplementedTinyUrlServer can be embedded to have forward compatible implementations.
type UnimplementedTinyUrlServer struct {
}

func (*UnimplementedTinyUrlServer) GetTinyUrl(context.Context, *OriGinUrl) (*ShortUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTinyUrl not implemented")
}
func (*UnimplementedTinyUrlServer) GetOriginUrl(context.Context, *ShortUrl) (*OriGinUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOriginUrl not implemented")
}

func RegisterTinyUrlServer(s *grpc.Server, srv TinyUrlServer) {
	s.RegisterService(&_TinyUrl_serviceDesc, srv)
}

func _TinyUrl_GetTinyUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OriGinUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinyUrlServer).GetTinyUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TinyUrl/GetTinyUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinyUrlServer).GetTinyUrl(ctx, req.(*OriGinUrl))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinyUrl_GetOriginUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinyUrlServer).GetOriginUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TinyUrl/GetOriginUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinyUrlServer).GetOriginUrl(ctx, req.(*ShortUrl))
	}
	return interceptor(ctx, in, info, handler)
}

var _TinyUrl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TinyUrl",
	HandlerType: (*TinyUrlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTinyUrl",
			Handler:    _TinyUrl_GetTinyUrl_Handler,
		},
		{
			MethodName: "GetOriginUrl",
			Handler:    _TinyUrl_GetOriginUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tiny_url.proto",
}
